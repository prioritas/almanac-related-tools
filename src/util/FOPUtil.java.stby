package util;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import java.util.Iterator;

import java.util.List;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Result;
import javax.xml.transform.stream.StreamSource;
import javax.xml.transform.sax.SAXResult;


import org.apache.fop.apps.FOUserAgent;
import org.apache.fop.apps.Fop;
import org.apache.fop.apps.FOPException;
import org.apache.fop.apps.FopFactory;
import org.apache.fop.apps.FormattingResults;
import org.apache.fop.apps.MimeConstants;
import org.apache.fop.apps.PageSequenceResults;

public class FOPUtil
{
  private FopFactory fopFactory = FopFactory.newInstance();

  /**
   * Converts an FO file to a PDF file using FOP
   * @param fo the FO file
   * @param pdf the target PDF file
   * @throws IOException In case of an I/O problem
   * @throws FOPException In case of a FOP problem
   */
  public void convertFO2PDF(File fo, File pdf)
    throws IOException, FOPException
  {
    OutputStream out = null;
    try
    {
      FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
      // configure foUserAgent as desired

      // Setup output stream.  Note: Using BufferedOutputStream
      // for performance reasons (helpful with FileOutputStreams).
      out = new FileOutputStream(pdf);
      out = new BufferedOutputStream(out);

      // Construct fop with desired output format
      Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, out);

      // Setup JAXP using identity transformer
      TransformerFactory factory = TransformerFactory.newInstance();
      Transformer transformer = factory.newTransformer(); // identity transformer

      // Setup input stream
      Source src = new StreamSource(fo);

      // Resulting SAX events (the generated FO) must be piped through to FOP
      Result res = new SAXResult(fop.getDefaultHandler());

      // Start XSLT transformation and FOP processing
      transformer.transform(src, res);

      // Result processing
      FormattingResults foResults = fop.getResults();
      List pageSequences = foResults.getPageSequences();
      for (Iterator it = pageSequences.iterator(); it.hasNext(); )
      {
        PageSequenceResults pageSequenceResults = (PageSequenceResults) it.next();
        System.out.println("PageSequence " + (String.valueOf(pageSequenceResults.getID()).length() > 0? pageSequenceResults.getID(): "<no id>") + " generated " + pageSequenceResults.getPageCount() + " pages.");
      }
      System.out.println("Generated " + foResults.getPageCount() + " pages in total.");

    }
    catch (Exception e)
    {
      e.printStackTrace(System.err);
      System.exit(-1);
    }
    finally
    {
      out.close();
    }
  }


  /**
   * Main method.
   * @param args command-line arguments
   */
  public static void main(String[] args)
  {
    try
    {
      System.out.println("Preparing...");

      //Setup directories
      File baseDir = new File(".");
      File outDir = baseDir;
      outDir.mkdirs();

      //Setup input and output files
      File fofile = new File(baseDir, "corrections.fo");
      File pdffile = new File(outDir, "corrections.pdf");

      System.out.println("Input: XSL-FO (" + fofile + ")");
      System.out.println("Output: PDF (" + pdffile + ")");
      System.out.println();
      System.out.println("Transforming...");

      FOPUtil app = new FOPUtil();
      app.convertFO2PDF(fofile, pdffile);

      System.out.println("Success!");
    }
    catch (Exception e)
    {
      e.printStackTrace(System.err);
      System.exit(-1);
    }
  }
}
